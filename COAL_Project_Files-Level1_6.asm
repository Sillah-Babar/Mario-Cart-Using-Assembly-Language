.model large
.stack 100h

.data ; first it prints the quotient and then the remainder of the average

LEVELS DW 1
XCOOR DW 0
YCOOR DW 0
SCORE DB 0
scoreSTR DB "$$$$"
scoreText DB "score: $"
done1 DB "CONGRATULATIONS$"
done2 DB "LEVEL COMPLETE$"
done3 DB "Press ENTER to continue.$"
instruction DB "HOW TO PLAY:$" 
instruction1 DB "Press RIGHT or LEFT keys to move Groot.$" 	
instruction2 DB "Press UP key to jump over hurdles.$"
instruction3 DB "Beware of the lurking evil ghosts.$"
instruction4 DB "Dodge the wicked witch's poison bombs.$"
instruction5 DB "Safely bring Groot back to the castle.$"
GLuck DB "GOOD LUCK  :)$"
Passed DB 0,0,0
Wluck DB "Better Luck Next Time!$" 
lose DB "YOU LOSE.$"
POINTS DB 20
witchcheck DW 0
POTIONS DB 40,100,180,250,90
collision DW 0
ghostcheck dw 0
ghostcheck2 dw 0
GHOST1XCOOR DW 0
GHOST1YCOOR DW 0
GHOST2XCOOR DW 0
GHOST2YCOOR DW 0
WITCHXCOOR DW 0
WITCHYCOOR DW 0
POTIONDROPX DB 5 DUP(0)
POTIONDROPY DB 5 DUP(0)
JUMP DW 40
XJUMP DW 5
temp DW 0
CANDY_ROWS DW 23
CANDY_COLS DW 6
HALFCANDY DW 3
Objectsx DB   60,140,220,54,134,214
Objectsy DB   145,113,137,176,176,176
CANDYHEIGHT_ROWS DW 8
CANDYHEIGHT_COLS DW 6
HeightOFCandy DW 5
SKULL_COLS DW 20
SKULL_ROWS DW 17
STONE_COLS DW 6
STONE_ROWS DW 6
CLOUD_ROWS DW 17
CLOUD_COLS DW 27
WITCH_ROWS DW 27
WITCH_COLS DW 28
GHOST1_ROWS DW 13
GHOST1_COLS DW 15
GHOST2_ROWS DW 13
GHOST2_COLS DW 15
POLE_ROWS DW 160
POLE_COLS DW  3
FLAG_ROWS DW 18
FLAG_COLS DW 26
GROOT_ROWS DW 34
GROOT_COLS DW 22
COL_No DW 0
Row_No DW 0
Ground DW 176
Remainder DB 0
POTION_ROWS DW 8
POTION_COLS DW 6

promptTextR DB ?
promptTextC DB ?



S DB 108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108
DB 108,108,108,108,108,108,108,0,0,0,0,0,0,0,0,0,108,108,108,108
DB 108,108,108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 108,108,108,108,108,0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,108
DB 108,108,108,108,0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0,0
DB 108,108,108,0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 108,108,0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 108,108,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,2C,2C,2C,2C,0,0,0
DB 108,0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,2C,0,0,0,0
DB 108,0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,0,0,0,0,0
DB 108,108,0,0,0,0,2C,2C,2C,2C,2C,2C,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,2C,2C,2C,2C,2C,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,2C,2C,2C,2C,2C,2C,0,0,0,0,0
DB 0,0,0,2C,2C,0,0,0,0,0,2C,2C,2C,2C,2C,2C,0,0,0,0
DB 0,0,0,2C,2C,2C,2C,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,108
DB 0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0,15
DB 0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,15
DB 0,0,0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,0,15
DB 108,0,0,0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,0,0,108
DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108
DB 108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108


U DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,43,43,43,43,43,0,0,0,0,0,0,43,43,43,43,43,0
DB 0,0,0,43,43,43,43,43,0,0,0,0,0,0,43,43,43,43,43,0
DB 0,0,43,43,43,43,43,43,0,0,0,0,0,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,43,0,0,0,0,0,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,43,0,0,0,0,43,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,0,0,0,0,0,43,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,0,0,0,0,0,43,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,0,0,0,0,0,43,43,43,43,43,0,0
DB 0,0,0,43,43,43,43,43,43,0,0,0,43,43,43,43,43,0,0,0
DB 0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0
DB 0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0
DB 0,0,0,0,0,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

P DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108
DB 0,0,0,0,0,0,4,4,4,4,4,4,0,0,0,0,0,0
DB 0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0,0,0
DB 0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0
DB 0,0,4,4,4,4,4,0,0,0,0,4,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,0,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,0,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,4,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,4,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,4,4,4,4,4,0,0,0,0
DB 0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0
DB 0,0,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0
DB 0,0,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,108
DB 0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,108,108
DB 0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108

E DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 108,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,2,2,2,2,2,2,2,2,2,0,0
DB 0,0,0,0,2,2,2,2,2,2,2,2,0,0,0
DB 0,0,0,2,2,2,2,2,2,2,2,2,0,0,0
DB 0,0,0,2,2,2,2,0,0,0,0,0,0,0,0
DB 0,0,0,2,2,2,0,0,0,0,0,0,0,0,0
DB 0,0,0,2,2,2,0,0,0,0,0,0,0,0,0
DB 0,0,2,2,2,2,2,2,2,2,0,0,0,0,0
DB 0,0,2,2,2,2,2,2,2,2,2,0,0,0,0
DB 0,0,2,2,2,2,2,2,2,2,2,0,0,0,0
DB 0,0,2,2,2,2,2,0,0,0,0,0,0,0,0
DB 0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0
DB 0,0,0,2,2,2,0,0,0,0,0,0,0,0,0
DB 0,0,0,2,2,2,2,2,2,2,2,2,0,0,0
DB 0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0
DB 0,0,0,0,2,2,2,2,2,2,2,2,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0


R1 DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108
DB 108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,43,43,43,43,43,43,43,43,43,0,0,0,0,108,108
DB 0,0,43,43,43,43,43,43,43,43,43,43,43,0,0,0,108,108
DB 0,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,0,0,0,0,43,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,0,0,0,0,0,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,0,0,0,0,43,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,0,0,0,43,43,43,43,43,43,0,0,0,108
DB 0,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,108,108
DB 0,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,108,108
DB 0,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0
DB 0,43,43,43,43,0,43,43,43,43,43,43,43,43,0,0,0,0
DB 0,43,43,43,43,0,0,43,43,43,43,43,43,43,43,0,0,0
DB 0,43,43,43,43,0,0,0,43,43,43,43,43,43,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,43,43,43,43,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

G DB 108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 108,0,0,0,0,0,0,4,4,4,4,4,4,4,0,0,0,0
DB 0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,0,0,0
DB 0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0
DB 0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0
DB 0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,4,4,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,4,4,4,4,4,0,0,0
DB 0,0,4,4,4,4,0,0,0,0,4,4,4,4,4,4,0,0
DB 0,0,4,4,4,4,0,0,0,0,0,0,0,4,4,4,0,0
DB 0,0,4,4,4,4,4,0,0,0,0,0,0,0,4,4,0,0
DB 0,0,0,4,4,4,4,0,0,0,0,0,0,4,4,4,0,0
DB 0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0
DB 0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0
DB 0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,0,0,0
DB 108,0,0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0
DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

R2 DB 108,108,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108
DB 108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108
DB 0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,108,108
DB 0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,108,108
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,0,0,0,0,2,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,0,0,0,2,2,2,2,2,2,0,0,0,108
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,108,108
DB 0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,108,108
DB 0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0
DB 0,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,0,0
DB 0,2,2,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0
DB 0,2,2,2,2,0,0,0,2,2,2,2,2,2,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

O1 DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,43,43,43,43,0,0,0,0,0,0
DB 0,0,0,0,43,43,43,43,43,43,43,0,0,0,0,0
DB 0,0,0,0,43,43,43,43,43,43,43,43,0,0,0,0
DB 0,0,0,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,43,43,43,43,43,43,43,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,0,0,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,0,0,0,0,43,43,43,43,0,0
DB 0,0,43,43,43,43,0,0,0,0,43,43,43,43,0,0
DB 0,0,43,43,43,43,0,0,0,0,43,43,43,43,0,0
DB 0,0,43,43,43,43,0,0,0,0,43,43,43,43,0,0
DB 0,0,43,43,43,43,0,0,0,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,43,43,43,43,43,43,43,0,0
DB 0,0,43,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,0,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,0,43,43,43,43,43,43,43,43,43,43,0,0,0
DB 0,0,0,0,0,43,43,43,43,43,43,43,0,0,0,0
DB 0,108,0,0,0,0,43,43,43,0,0,0,0,0,0,108
DB 0,108,108,0,0,0,0,0,0,0,0,0,0,0,108,108
DB 0,108,108,108,0,0,0,0,0,0,0,0,0,108,108,108

O2 DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,2C,2C,2C,2C,0,0,0,0,0,0
DB 0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0,0
DB 0,0,0,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0,0
DB 0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,2C,0,0,2C,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,0,0,0,0,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,0,0,0,0,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,0,0,0,0,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,0,0,0,0,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,0,0,0,2C,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0
DB 0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 0,0,2C,2C,2C,2C,2C,2C,2C,2C,2C,2C,0,0,0
DB 0,0,0,0,2C,2C,2C,2C,2C,2C,2C,0,0,0,0
DB 108,0,0,0,0,2C,2C,2C,0,0,0,0,0,0,108
DB 108,108,0,0,0,0,0,0,0,0,0,0,0,108,108
DB 108,108,108,0,0,0,0,0,0,0,0,0,108,108,108

T DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0
DB 0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0
DB 0,2,2,2,2,0,0,2,2,2,2,2,0,0,2,2,2,0,0
DB 0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,0,0
DB 0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,108,108,108
DB 0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,108,108,108,108
DB 0,0,0,0,0,2,2,2,2,2,0,0,0,0,0,108,108,108,108
DB 0,0,0,0,2,2,2,2,2,0,0,0,0,0,0,108,108,108,108
DB 0,0,0,0,2,2,2,2,2,0,0,0,0,0,108,108,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108
DB 0,0,0,0,0,0,0,0,0,0,0,0,0,108,108,108,108,108,108
; KINGDOM1_UP BLOCK:   12 rows, 21 columns         

KINGDOM1_ROWS DW 63     ;7x9
KINGDOM1_COLS DW 42     ;7x6

KINGDOM1_UP_ROWS DW 28   ;7x9 
KINGDOM1_UP_COLS DW 35   ;7x4


KINGDOM1_L_ROWS DW 63   ;7x9 
KINGDOM1_L_COLS DW 21   ;7x4

Potion  DB 35,35,6,6,35,35
       DB 35,35,6,6,35,35
       DB 35,0,02,02,0,35
       DB 35,0,02,02,0,35
       DB 0,02,02,02,02,0
       DB 0,02,02,02,10,0
       DB 0,02,02,10,10,0
       DB 0,0,0,0,0,0
Groot   DB 35,35,35,35,35,35,35,35,02,35,35,35,35,35,35,35,35,35,35,02,02,02 
        DB 35,35,35,35,35,35,35,35,02,35,35,35,35,35,35,02,35,06,35,02,02,35
	DB 35,35,02,35,35,35,35,02,02,02,35,02,35,35,35,02,02,02,35,02,02,35
	DB 35,10,02,35,06,06,10,06,02,10,10,10,10,35,35,02,02,02,02,35,02,35
	DB 10,02,10,35,06,35,10,06,02,06,10,06,10,10,10,06,10,10,10,10,10,35
	DB 02,10,10,02,06,02,10,06,10,06,06,06,06,06,06,06,06,10,10,06,02,02
	DB 02,06,06,06,02,06,06,06,06,06,06,06,06,06,06,06,06,06,10,06,10,06 ;GREEN GRASS
	DB 06,06,06,06,06,00,06,06,06,06,06,06,06,06,06,06,00,06,06,06,06,06
	DB 06,06,06,06,00,00,15,06,06,06,06,06,06,06,06,00,00,15,06,06,06,06
	DB 06,06,06,06,00,00,15,06,06,06,06,06,06,06,06,00,00,15,06,06,06,06
	DB 06,06,06,06,15,15,15,06,06,06,06,06,06,06,06,15,15,15,06,06,06,06
	DB 06,06,06,06,06,15,06,06,06,06,06,06,06,06,06,06,15,06,06,06,06,06
	DB 35,06,06,06,06,06,06,06,00,06,06,06,06,00,06,06,06,06,06,06,06,35 ;SMILE STARTS
	DB 35,35,06,06,06,06,06,06,06,00,00,00,00,06,06,06,06,06,06,06,35,35
        DB 35,35,35,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,35,35,35
        DB 35,35,35,35,06,06,06,06,06,06,06,06,06,06,06,06,06,06,35,35,35,35
	DB 35,35,35,35,35,06,06,06,06,06,06,06,06,06,06,06,06,35,35,35,35,35 ;17 lines

	DB 35,35,35,35,35,35,35,00,06,06,06,06,06,00,06,35,35,35,35,35,35,35
	DB 35,35,35,35,35,35,06,06,06,00,06,06,06,00,06,06,35,35,35,35,35,35
	DB 35,35,35,35,35,06,00,06,00,06,00,06,00,06,06,06,06,35,35,35,35,35
        DB 35,35,35,35,06,00,06,06,06,06,06,00,06,06,00,06,06,06,35,35,35,35
        DB 35,35,35,06,00,06,00,06,06,06,00,06,06,06,06,00,06,06,06,35,35,35
	DB 35,35,06,06,06,06,06,00,06,00,06,06,06,00,06,06,00,06,06,06,35,35
	DB 35,06,06,06,06,06,06,06,00,06,06,06,00,06,06,06,06,00,06,06,06,35
	DB 35,06,06,06,06,06,06,00,06,00,06,00,06,00,06,06,06,06,06,06,06,35
	DB 06,06,06,06,16,06,00,06,06,06,00,06,06,06,00,06,06,06,06,06,06,06
        DB 10,06,06,10,35,00,06,06,06,06,06,00,00,06,06,00,06,35,10,06,06,10
	DB 02,10,02,02,35,06,00,06,00,06,06,06,06,00,06,06,06,35,02,10,02,02
	DB 35,02,10,35,35,06,06,00,06,06,06,06,06,06,00,06,06,35,35,02,10,35 ;35

	DB 35,35,35,35,06,06,06,00,06,06,35,06,06,00,06,00,06,35,35,35,35,35
        DB 35,35,35,35,06,06,06,06,00,06,35,06,00,06,06,06,00,35,35,35,35,35
	DB 35,35,35,35,00,06,06,00,06,00,35,00,06,00,06,06,06,35,35,35,35,35
	DB 35,35,35,35,06,06,00,06,06,06,35,06,06,06,00,06,06,35,35,35,35,35
	DB 35,35,35,35,35,00,00,00,00,35,35,35,00,00,00,00,35,35,35,35,35,35 ;5

CANDY_CANE1 DB 40,40,40,40,15,15
            DB 40,40,40,15,15,15
            DB 40,40,15,15,15,40
            DB 40,15,15,15,40,40
            DB 15,15,15,40,40,40
            DB 15,15,40,40,40,15
            DB 15,40,40,40,15,15
 	    DB 40,40,40,15,15,15
            DB 40,40,15,15,15,40
            DB 40,15,15,15,40,40
            DB 15,15,15,40,40,40
            DB 15,15,40,40,40,15
            DB 15,40,40,40,15,15
 	    DB 40,40,40,15,15,15
 	    DB 40,40,15,15,15,40
 	    DB 40,15,15,15,40,40
 	    DB 15,15,15,40,40,40
 	    DB 15,15,40,40,40,15
 	    DB 15,40,40,40,15,15
 	    DB 40,40,40,15,15,15
 	    DB 40,40,15,15,15,40
            DB 40,15,15,15,40,40
            DB 15,15,15,40,40,40 ;23 ROWS AND 6 COLS
 


STONE   DB 108,21,22,22,108,108
 	DB 21,20,24,27,15,108
 	DB 20,22,22,25,27,22
 	DB 20,27,22,23,20,108
 	DB 108,20,21,20,108,108
 	DB 108,108,20,20,108,108 ;6*6	
CLOUD  DB  35,35,35,35,35,00,00,00,00,00,35,35,35,00,00,35,35,35,35,35,35,35,35,35,35,35,35 
        DB 35,35,35,35,00,52,52,52,00,35,35,35,00,52,00,35,00,00,35,35,35,00,00,00,35,35,35
	DB 35,35,35,00,52,52,52,52,52,00,00,00,53,52,52,00,52,52,00,35,00,52,52,52,00,35,35
	DB 35,35,00,53,52,15,15,52,51,52,52,53,53,52,52,52,57,57,52,00,52,57,52,15,57,00,35
	DB 35,35,00,53,52,15,15,52,57,51,51,57,57,57,57,57,52,57,57,52,57,57,15,52,15,53,00
	DB 00,00,53,53,53,51,52,51,51,57,57,51,57,52,52,52,52,57,57,57,57,57,57,57,57,57,00
	DB 00,53,53,53,53,52,52,51,57,57,57,57,57,52,52,57,52,57,57,57,15,15,57,57,57,57,00 
	DB 00,53,53,53,53,51,57,51,51,57,51,57,52,52,52,57,57,57,57,57,57,57,57,57,57,57,00
	DB 00,53,53,53,52,52,57,51,51,51,51,51,51,52,52,57,57,52,57,57,57,57,57,57,57,57,00
	DB 00,53,53,53,52,52,15,57,57,51,57,51,51,51,57,57,57,52,52,57,15,57,57,57,57,57,00
	DB 35,00,53,53,52,15,15,51,51,57,57,51,51,57,57,57,57,57,57,57,15,15,57,57,53,00,35
	DB 35,00,53,53,53,53,15,51,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,53,00,35,35
	DB 35,35,00,53,53,53,53,51,57,57,57,57,57,57,50,50,57,57,57,57,57,57,57,00,35,35,35 
	DB 35,35,35,00,53,53,53,57,57,52,00,00,57,57,50,57,57,00,00,00,00,00,00,00,35,35,35
        DB 35,35,35,35,00,52,53,51,52,00,35,35,00,57,57,57,00,35,35,35,35,35,35,35,35,35,35
        DB 35,35,35,35,00,52,53,52,00,35,35,35,35,00,00,00,35,35,35,35,35,35,35,35,35,35,35
	DB 35,35,35,35,35,00,00,00,00,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35 
CANDYCANE_HEIGHT DB 15,15,15,40,40,40
 		 DB 15,15,40,40,40,15
 		 DB 15,40,40,40,15,15
 		 DB 40,40,40,15,15,15
 		 DB 40,40,15,15,15,40
 		 DB 40,15,15,15,40,40
 		 DB 15,15,15,40,40,40
		 DB 15,15,40,40,40,15	;8*6
                        
SKULL   DB 108,108,108,108,108,00,00,00,00,00,00,00,00,00,108,108,108,108,108,108
	DB 108,108,108,108,00,15,15,15,15,15,00,00,00,15,00,108,108,108,108,108
	DB 108,108,108,00,15,15,15,15,15,15,15,15,15,15,15,00,108,108,108,108
        DB 108,108,00,15,15,15,15,15,15,15,15,15,15,15,15,15,00,108,108,108
        DB 108,00,15,15,00,00,00,00,15,15,15,00,00,00,00,15,15,00,108,108
	DB 108,00,00,00,00,15,15,00,00,00,00,00,15,15,00,00,00,00,108,108
	DB 108,00,15,15,00,00,00,00,15,15,15,00,00,00,00,15,15,00,108,108
	DB 108,00,15,15,00,00,00,00,15,15,15,00,00,00,00,15,15,00,108,108
	DB 108,00,15,15,15,15,15,15,15,00,15,15,15,15,15,00,15,00,108,108
        DB 108,00,15,00,15,15,15,15,15,00,00,15,15,15,00,15,15,00,108,108
	DB 108,108,00,15,00,15,15,15,00,00,00,15,15,15,15,15,00,108,108,108
	DB 108,108,108,00,15,15,15,15,15,00,15,15,15,15,15,00,108,108,108,108
	DB 108,108,108,108,00,15,15,15,15,15,15,15,15,15,00,108,108,108,108,108
        DB 108,108,108,108,00,00,00,00,00,00,00,00,00,00,108,108,108,108,108,108
	DB 108,108,108,108,00,15,00,15,00,15,00,15,15,00,108,108,108,108,108,108
	DB 108,108,108,108,00,00,15,00,15,00,15,00,15,00,108,108,108,108,108,108
	DB 108,108,108,108,108,00,00,00,00,00,00,00,00,108,108,108,108,108,108,108 ;17*20


WITCH DB 35,35,35,35,35,35,35,35,35,35,35,35,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35 
DB 35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,0,0,0,0,0,0,6,6,35,35,35,35,35,35,35,35,35,35,35,35,35

DB 35,35,35,35,35,0,0,0,0,7,0,7,6,6,6,6,6,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,0,0,35,35,7,7,7,7,6,6,6,6,6,6,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,4,7,7,6,6,6,6,6,6,6,35,35,35,35,35,35,35,35

DB 35,35,35,35,35,35,35,35,35,35,7,7,0,0,6,6,6,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,0,0,35,35,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,0,0,35,35,0,0,0,0,35,35,35,35,35,35,35,35,6,7,6
DB 35,35,35,35,35,35,35,35,35,7,35,35,0,0,0,0,0,35,35,35,35,35,35,35,7,6,35,35
DB 35,35,35,35,35,35,35,35,7,7,35,0,0,0,0,0,0,35,35,35,35,35,7,6,7,6,7,6

DB 8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,8,8,8,8,6,7,6,7,6,35,35 ;13

DB 35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,35,35,35,35,7,6,7,6,7,6
DB 35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,35,35,35,35,35,35,7,6,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,35,35,35,35,35,35,6,7,6
DB 35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,35,35,7,35,7,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,35,35,0,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35
DB 35,35,35,35,35,35,35,35,35,0,0,0,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35


KINGDOM1_L DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,8,8,8, 8,8,8,8,8,8,35
         DB  35,35,35,35,35,35,35, 35,35,35,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 35,35,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 35,8,8,8,0,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 8,8,8,0,0,0,8, 8,8,8,8,8,8,8
                  
         DB  35,35,35,35,35,35,8, 8,8,0,0,0,0,0, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,8,8, 8,0,0,0,0,0,0, 0,8,8,8,8,8,8
         DB  35,8,35,35,8,8,8, 0,0,0,0,0,0,0, 0,0,8,8,8,8,8
         DB  35,35,8,8,8,8,0, 0,0,14,14,0,14,14, 0,0,0,8,8,8,8
         DB  35,35,35,8,8,0,0, 0,0,14,14,0,14,14, 0,0,0,0,8,8,8
         DB  35,35,35,35,0,0,0, 0,0,14,14,0,14,14, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,35

         DB  35,35,35,35,0,0,0, 0,0,14,14,0,14,14, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,14,14,0,14,14, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,14,14,0,14,14, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,35
         DB  35,35,35,35,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,35    
         
         
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,8
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,8,8
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,8,8,8
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,8,8,8,8
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,8,8,8,8,8

         DB  35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 0,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 0,0,0,0,0,0,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 0,0,0,0,0,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 0,0,0,0,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,35,35,35, 0,0,0,8,8,8,8, 8,8,8,8,8,8,8
         DB  8,35,35,35,35,35,35, 0,0,8,8,8,8,8, 8,8,8,8,8,8,8

         DB  8,8,8,35,35,35,35, 0,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,8,8,8,35,35,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8
         DB  35,35,35,35,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8

         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 0,0,0,0,14,14,0
         DB  35,35,35,35,35,35,35, 35,0,0,0,0,0,0, 0,0,0,0,14,14,0

         DB  35,35,35,35,35,35,35, 35,0,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,35,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,35,0,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,35,35,0,0,0, 0,0,0,0,0,0,0
         DB  35,35,35,35,35,35,35, 35,35,35,35,0,0,0, 0,0,0,0,0,0,0
         
         
; KINGDOM1_UP BLOCK:  4x7 = 28 rows, 5x7 = 35 columns         

KINGDOM1_UP DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,0,0,0,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,0,0,0,0,0,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,0,0, 0,0,0,14,0,14,0, 0,0,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,0,0,0, 0,0,0,14,0,14,0, 0,0,0,35,35,35,35, 35,35,35,35,35,35,35      
         
         DB  35,35,35,35,35,35,35, 35,35,35,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,0,0,0, 0,0,0,14,0,14,0, 0,0,0,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,0,0, 0,0,0,14,0,14,0, 0,0,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,35,35,35,35,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  0,35,35,35,35,35,35, 35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 35,35,35,35,35,35,35, 35,35,35,35,0,35,35
         DB  0,0,35,35,35,35,35, 35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 35,35,35,35,35,35,35, 35,35,35,0,0,35,35
         DB  0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 35,35,35,35,35,35,35, 35,0,0,0,0,35,35   
                  
         DB  0,0,0,0,0,0,35, 35,35,35,35,35,35,35, 0,0,0,0,0,0,0, 35,35,35,35,35,35,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35
         DB  35,35,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,35,35,35,35
         DB  35,35,35,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  35,35,35,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  35,35,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,35,35,35,35
         
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,0, 14,14,0,0,0,14,14, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,35,35,35,35,35, 35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35
                  



KINGDOM1 DB  35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  35,35,0,0,0,0,14, 14,14,14,0,14,14,14, 14,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  8,35,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  8,8,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  8,8,8,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         
         DB  8,8,8,8,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,0,0, 0,8,0,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,0, 0,8,8,0,0,0,0, 0,0,0,0,35,35,35, 35,35,35,8,8,8,8, 8,8,8,8,35,35,35, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,0,0,0,0, 0,0,0,0,35,35,35, 35,35,8,8,8,8,8, 8,8,8,8,8,35,35, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,0,0,0,0,0, 0,0,0,0,35,35,35, 35,8,8,8,8,8,8, 8,8,8,8,8,8,35, 35,35,35,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,8,0,35,35,35, 8,8,8,8,8,8,8, 8,8,8,0,8,8,8, 35,35,35,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,8,8,0,35,35,8, 8,8,8,8,8,8,8, 8,8,0,0,0,8,8, 8,35,35,35,35,35,35
         
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,8,8,0,35,8,8, 8,8,8,8,8,8,8, 8,0,0,0,0,0,8, 8,8,35,35,35,35,8
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,8,8,8,8,8, 8,8,8,8,8,8,8, 0,0,0,0,0,0,0, 8,8,8,35,35,8,8
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,8,8,8,8, 8,8,8,8,8,8,0, 0,0,0,0,0,0,0, 0,8,8,8,8,8,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35, 0,0,0,0,0,0,0, 0,14,14,0,14,14,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35, 0,0,0,0,0,0,0, 0,14,14,0,14,14,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,35,35,35
         
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,35, 0,0,0,0,0,0,0, 0,14,14,0,14,14,0, 0,0,0,0,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,0, 0,0,0,0,0,0,0, 0,14,14,0,14,14,0, 0,0,0,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,35,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  35,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,0,0,0,0,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,0,0,0,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,0,0,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 0,8,8,8,8,0,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35
         
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,8,0, 0,0,8,8,8,8,0, 0,0,0,0,0,0,0, 0,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,8,0,0, 0,0,0,8,8,8,8, 0,0,0,0,0,0,0, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,8,0,0,0, 0,0,0,0,8,8,8, 8,0,0,0,0,0,0, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,8,0,0,0,0, 0,0,0,0,0,8,8, 8,8,0,0,0,0,0, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,8,0,0,0,0,0, 0,0,0,0,0,0,8, 8,8,8,0,0,0,0, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 8,0,0,0,0,0,0, 0,0,0,0,0,0,0, 8,8,8,8,0,0,0, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,8, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,8,8,8,8,0,35, 35,35,35,35,35,35,35
         
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,8,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,8,8,8,8,35, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,8,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,8,8,8,8, 35,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,8,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,8,8,8, 8,35,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,8,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,8,8, 8,8,35,35,35,35,35
         DB  8,8,8,8,8,8,8, 8,8,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,8, 8,8,8,35,35,8,35
         DB  8,8,8,8,8,8,8, 8,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 8,8,8,8,8,8,35
         DB  8,8,8,8,8,8,8, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,8,8,8,8,35,35
         
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35,35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         DB  0,0,14,14,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         DB  0,0,14,14,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,0,0,14,14,0,0, 0,0,0,0,0,0,35, 35,35,35,35,35,35,35
         
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,0,0,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35
         DB  0,0,0,0,0,0,0, 0,0,0,0,0,0,0, 0,0,14,14,14,14,14, 14,14,14,14,14,0,0, 0,0,0,0,0,35,35, 35,35,35,35,35,35,35



GHOST1 DB 35,35,35,35,15,15,15,15,15,15,15,35,35,35,35
DB 35,35,35,35,15,15,15,15,15,15,15,35,35,35,35

DB 35,35,35,15,15,15,15,15,15,15,15,15,35,35,35
DB 35,35,35,15,15,0,15,15,15,0,15,15,35,35,35	;eyes

DB 35,35,35,15,15,15,15,15,15,15,15,15,35,35,35
DB 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15

DB 15,15,15,15,15,0,0,0,0,0,15,15,15,15,15
DB 15,15,15,15,15,0,0,0,0,0,15,15,15,15,15

DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,35,35,15,15,15,35,35,15,15,35,35
DB 35,35,15,15,35,35,15,15,15,35,35,15,15,35,35


GHOST2 DB 35,35,35,35,15,15,15,15,15,15,15,35,35,35,35
DB 35,35,35,35,15,15,15,15,15,15,15,35,35,35,35

DB 35,35,35,15,15,15,15,15,15,15,15,15,35,35,35
DB 35,35,35,15,15,0,15,15,15,0,15,15,35,35,35

DB 35,35,35,15,15,15,15,15,15,15,15,15,35,35,35
DB 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15

DB 15,15,15,15,0,0,0,0,0,0,0,15,15,15,15
DB 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15

DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,15,15,15,15,15,15,15,15,15,35,35
DB 35,35,15,15,35,35,15,15,15,35,35,15,15,35,35
DB 35,35,15,15,35,35,15,15,15,35,35,15,15,35,35

SPIDER_FLAG DB 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
DB 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12

DB 12,12,12,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,12,12,12
DB 12,12,12,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,12,12,12
DB 12,0,0,12,12,12,12,0,0,12,0,0,0,0,0,0,12,0,0,12,12,12,12,0,0,12
DB 12,0,0,12,12,12,12,0,0,12,0,0,0,0,0,0,12,0,0,12,12,12,12,0,0,12

DB 12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12
DB 12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12

DB 12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12
DB 12,12,12,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12

DB 12,12,0,0,12,12,12,12,12,0,0,0,0,0,0,0,0,12,12,12,12,12,0,0,12,12
DB 12,12,0,0,12,12,12,12,12,0,0,0,0,0,0,0,0,12,12,12,12,12,0,0,12,12

DB 12,12,12,12,12,12,0,0,0,0,0,15,0,0,15,0,0,0,0,0,12,12,12,12,12,12
DB 12,12,12,12,12,12,0,0,0,0,0,15,0,0,15,0,0,0,0,0,12,12,12,12,12,12

DB 12,12,12,12,0,0,12,12,12,0,0,0,0,0,0,0,0,12,12,12,0,0,12,12,12,12
DB 12,12,12,12,0,0,12,12,12,0,0,0,0,0,0,0,0,12,12,12,0,0,12,12,12,12

DB 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
DB 12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12


POLE DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7
DB 8,8,8,8
DB 7,7,7,7

.code

MAIN PROC

mov ax,@data 
mov ds,ax;to move the data within the code


mymacro macro p1,p2,p3
  
        mov ah,0Ch
        mov cx, p1   ;COL
	mov dx, p2  ;ROW
        mov al, p3  ;PIXEL COLOUR  
	INT 10h
 endm
mov ah,0H ;SETTING VIDEO MODE
mov al,13h ;choose Type of Video mode  25x40. 256 colors. 200*320 pixels
int 10h

  

    mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,35	;for colour
    int 10h

call Draw_foreGround
mov XCOOR,0
mov YCOOR,0
;; PRINTING THE MENU
call printTitle
call takeUsername

call delay
call delay

  mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,35	;for colour
    int 10h


mov ax,0               ;;DRAWING FIRST CANDY CANE
mov al,Objectsx[0]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[0]
mov YCOOR,ax
mov HeightofCandy,2
call Draw_CANDYCANE

mov ax,0               ;;DRAWING SECOND CANDY CANE
mov al,Objectsx[1]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[1]
mov YCOOR,ax
mov HeightofCandy,6
call Draw_CANDYCANE

mov ax,0               ;;DRAWING THIRD CANDY CANE
mov al,Objectsx[2]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[2]
mov YCOOR,ax
mov HeightofCandy,3
call Draw_CANDYCANE


mov YCOOR,0
MOV XCOOR,0
call Draw_ForeGround



mov ax,GROUND
sub ax,GROOT_ROWS
mov YCOOR,ax
mov XCOOR,5

call Draw_Groot


comment!.......................................................MOVEMENT.......................................................!
.IF LEVELS==1
call Level1
.ENDIF

COMMENT!..........................................LEVEL2..................................................!
.IF LEVELS==2

call screen_clear
mov ax,GROUND
sub ax,GROOT_ROWS
mov YCOOR,ax
mov XCOOR,5

mov passed[0],0
mov passed[1],0
mov passed[2],0
mov ax,0
mov al,OBJECTSX[0]
add ax,CANDY_COLS
mov GHOST1XCOOR,ax

mov ax,GROUND
sub ax,GHOST1_ROWS
mov GHOST1YCOOR,ax

mov ax,0
mov al,OBJECTSX[1]
add ax,CANDY_COLS
mov GHOST2XCOOR,ax

mov ax,GROUND
sub ax,GHOST2_ROWS
mov GHOST2YCOOR,ax



call LEVEL2
.ENDIF

COMMENT!..........................................LEVEL3..................................................!
.IF LEVELS==3

call screen_clear
call ghosts_clear
call clear_flag
mov ax,GROUND
sub ax,GROOT_ROWS
mov YCOOR,ax
mov XCOOR,5

mov passed[0],0
mov passed[1],0
mov passed[2],0

mov ax,0
mov al,OBJECTSX[0]
add ax,CANDY_COLS
mov GHOST1XCOOR,ax

mov ax,GROUND
sub ax,GHOST1_ROWS
mov GHOST1YCOOR,ax

mov ax,0
mov al,OBJECTSX[1]
add ax,CANDY_COLS
mov GHOST2XCOOR,ax

mov ax,GROUND
sub ax,GHOST2_ROWS
mov GHOST2YCOOR,ax

mov ghostcheck,0
mov ghostcheck2,0
mov collision,0

mov WITCHXCOOR,230
MOV WITCHYCOOR,1

call DRAW_KINGDOM

mov ax,GROUND
sub ax,GROOT_ROWS
mov YCOOR,ax
mov XCOOR,5

call Level3

.ENDIF

.IF LEVELS==4
 mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,35	;for colour
    int 10h
.endif
exit:
mov ah,04ch
int 21h
ret
MAIN ENDP
comment!..............LEVEL 3 PROC...............................!
LEVEL3 PROC
push ax
push bx
push cx
push dx
push si



l1:
.IF LEVELS==3

mov collision,0
call WITCH_GHOST_CHECK
mov ax,0


mov ah,01h            ;register pressed key
int 16h 

jz justDown
mov ah,00h
int 16h

comparisons:
CMP aH,4Bh
JE left
CMP aH,4Dh
JE right
CMP aH,48h
JE UP
CMP ah,01h
JE exit

JMP  GOdown


left:
call GHOSTS_CLEAR
call screen_clear
call left_conditions
JMP GOdown

right:
call GHOSTS_CLEAR
call screen_clear
 call Right_conditions         
JMP GOdown

Up:
call GHOSTS_CLEAR
call screen_clear

mov ax,JUMP ;;SO THAT GROOT DOESNOT GO INTO THE TOP OF THE SCREEN
.if YCOOR >= ax
mov ax,JUMP
SUB YCOOR,ax
.endif

JMP GOdown

GoDown:

call witch_clear

call witch_GHOST_MOVEMENT
call CHECK_WITCH_POTION
call POTION_CLEAR
call POTION_MOVEMENT
call Draw_Again_LEVEL3
call score_check
call detectCollision
call POTION_DISAPPEAR
call score_Check
call display
call displayScore


.if collision==1
mov levels,4
jmp exit
.endif 

mov ax,311 ;;COORDINATES OF THE FLAG POLE
mov bx,XCOOR
add bx,GROOT_COLS
.if bx >= AX  ;LEVEL3 COMPLETION CHECK
 mov LEVELS,4
.ENDIF

call delay

JMP l1

justdown:

call witch_clear
call screen_clear
call GHOSTS_clear
call gravity


call witch_GHOST_MOVEMENT
call CHECK_WITCH_POTION 
call POTION_CLEAR
call POTION_MOVEMENT
call Draw_Again_LEVEL3
call score_check
call detectCollision

call POTION_DISAPPEAR
call score_Check
call display
call displayScore

.if collision==1
mov levels,4
jmp exit
.endif 
call delay


jmp l1
.ENDIF


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
LEVEL3 ENDP
comment!.....................................................SCORE CHECK..............................................!
SCORE_CHECK PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov ax,0
mov al,OBJECTSX[0]

MOV CX,0
mov cl,Objectsx[0]
add cx,1
.if XCOOR >= ax  && XCOOR <= cx
.if passed[0] == 0
MOV Cl,POINTS
ADD SCORE, Cl
mov passed[0],1
.endif
.endif

mov ax,0
mov al,OBJECTSX[1]

MOV CX,0
mov cl,Objectsx[1]
add cx,1
.if XCOOR >= ax  && XCOOR <= cx
.if passed[1] == 0
MOV Cl,POINTS
ADD SCORE, Cl
mov passed[1],1
.endif
.endif

mov ax,0
mov al,OBJECTSX[2]

MOV CX,0
mov cl,Objectsx[2]
add cx,1
.if XCOOR >= ax  && XCOOR <= cx
.if passed[2] == 0
MOV Cl,POINTS
ADD SCORE, Cl
mov passed[2],1
.endif
.endif


pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
SCORE_CHECK ENDP

comment!..............POTION_DISAPPEAR...............................!
POTION_DISAPPEAR PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov cx,0
mov cx,4
mov si,0

l3:
push cx
   mov bx,0
   mov bx,Ground
   sub bx,POTION_ROWS

   mov dx,0
   mov dl,POTIONDROPY[SI]
   add dx,10

.if POTIONDROPY[SI] !=0   
   .if dx >= bx
push si
;; CLEARING THE CURRENT POSTION OF THE POTION ;;
mov ax,0
mov al,POTIONDROPY[si]
mov Row_No,ax
mov ax,0
mov al,POTIONDROPX[si]
mov cx,POTION_ROWS
mov si,0


	l2:
	push cx
	mov cx,POTION_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,POTION_COLS
	inc row_no
	pop cx
	loop l2
   pop si
   mov POTIONDROPY[SI],0
   .endif
.endif
  inc si
  pop cx
 loop l3

pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
POTION_DISAPPEAR ENDP
comment!..............POTION_CLEAR...............................!
POTION_CLEAR PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov cx,0
mov cx,4
mov si,0

l3:
push cx
mov ax,0
mov al,POTIONDROPY[si]
mov Row_No,ax
mov ax,0
mov al,POTIONDROPX[si]
mov cx,POTION_ROWS
push si
mov si,0


	l2:
	push cx
	mov cx,POTION_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,POTION_COLS
	inc row_no
	pop cx
	loop l2
 pop si
  inc si
  pop cx
 loop l3

pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
POTION_clear ENDP
COMMENT!..........................................POTION MOVEMENT..................................................!
POTION_MOVEMENT PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov si,0
mov cx,4
l1:
.if POTIONDROPY[si] != 0
add POTIONDROPY[si],10
.endif
inc si
loop l1

pop XCOOR
pop yCOOR


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
POTION_MOVEMENT ENDP
COMMENT!..........................................Draw_Again_LEVEL3..................................................!
Draw_Again_LEVEL3 PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

;mov ah,0H ;SETTING VIDEO MODE
;mov al,13h ;choose Type of Video mode  25x40. 256 colors. 200*320 pixels
;int 10h

  ;;STARTCLOUD
mov YCOOR,50
mov XCOOR,20
call Draw_CLOUD

;;MID CLOUD
mov YCOOR,30
mov XCOOR,120
call Draw_CLOUD

mov YCOOR,40
mov XCOOR,127
call Draw_CLOUD

;;END CLOUD
mov YCOOR,30
mov XCOOR,300
call Draw_CLOUD

mov YCOOR,60
mov XCOOR,200
call Draw_CLOUD

call Draw_KINGDOM

mov ax,GHOST1YCOOR
mov YCOOR,ax
mov ax,GHOST1XCOOR
mov XCOOR,ax

call Draw_GHOST1

mov ax,GHOST2YCOOR
mov YCOOR,ax
mov ax,GHOST2XCOOR
mov XCOOR,ax

call Draw_GHOST2
 
mov ax,WITCHXCOOR
mov XCOOR,ax
mov ax,WITCHYCOOR
mov YCOOR,ax

call Draw_witch

mov cx,0
mov cx,4
mov si,0
l5:
mov ax,0
mov al,POTIONDROPX[si]
mov XCOOR,ax
mov ax,0
mov al,POTIONDROPY[si]
mov YCOOR,ax

.if POTIONDROPY[si] != 0
call Draw_potion
.endif

inc si
loop l5

pop XCOOR
pop yCOOR

call Draw_GROOT


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
Draw_Again_LEVEL3 ENDP

comment!..............CHECK_WITCH_POTION...............................!
CHECK_WITCH_POTION PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov cx,0
mov cx,4
mov si,0


l1:
push cx
mov ax,WITCHXCOOR
add ax,WITCH_COLS

mov cx,WITCHXCOOR

mov dx,0
mov dl,POTIONS[si]
.if dx >= cx && dx <= ax
mov ax,0
mov al,POTIONS[si]
mov POTIONDROPX[si],al
mov ax,0
mov ax,WITCHYCOOR
sub ax,5
mov POTIONDROPY[si],al

.endif 
inc si
pop cx
loop l1

pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
CHECK_WITCH_POTION ENDP
comment!..............WITCH_GHOST_MOVEMENT...............................!
WITCH_GHOST_MOVEMENT PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

.if ghostcheck==0 ;; CHECKING CONDITIONS FOR LEFT AND RIGHT MOVEMENT OF GHOST1
INC GHOST1XCOOR
.else
DEC GHOST1XCOOR
.endif

.if ghostcheck2==0 ;; CHECKING CONDITIONS FOR LEFT AND RIGHT MOVEMENT OF GHOST2
INC GHOST2XCOOR
.else
DEC GHOST2XCOOR
.endif

.if witchcheck==0 ;; CHECKING CONDITIONS FOR LEFT AND RIGHT MOVEMENT OF GHOST1
sub WITCHXCOOR,2
.else
add WITCHXCOOR,2
.endif



pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
WITCH_GHOST_MOVEMENT ENDP
comment!..............WITCH_GHOST_CHECK...............................!
WITCH_GHOST_CHECK PROC
push ax
push bx
push cx
push dx
push si


push YCOOR
push XCOOR


mov ax,0              ;;RESETTING WITCH POSITION
mov al,30
.IF WITCHXCOOR <= AX 
mov witchcheck, 1
.else
mov ax,0
mov al,250
sub ax,WITCH_COLS
.if WITCHXCOOR >= ax
mov witchcheck, 0
 .endif
.endif

mov ax,0           ;;RESETTING GHOST1 POSITION
mov al,Objectsx[1]
SUB AX,GHOST1_COLS
.IF GHOST1XCOOR == AX
mov ghostcheck, 1
.else
mov ax,0
mov al,Objectsx[0]
add ax,candy_cols
.if GHOST1XCOOR ==ax
mov ghostcheck, 0
 .endif
.endif


mov ax,0          ;;RESETTING GHOST2 POSTION
mov al,Objectsx[2]
SUB AX,GHOST2_COLS
.IF GHOST2XCOOR == AX
mov ghostcheck2, 1
.else
mov ax,0
mov al,Objectsx[1]
add ax,candy_cols
.if GHOST2XCOOR ==ax
mov ghostcheck2, 0
 .endif
.endif



pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
WITCH_GHOST_CHECK ENDP
comment!..............WITCH CLEAR...............................!
WITCH_Clear PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov ax,witchycoor
mov Row_No,ax
mov ax,0
mov ax,WITCHXCOOR
mov cx,WITCH_ROWS
mov si,0


	l2:
	push cx
	mov cx,WITCH_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,WITCH_COLS
	inc row_no
	pop cx
	loop l2


pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
WITCH_clear ENDP
comment!..............LEVEL 2 PROC...............................!
LEVEL2 PROC
push ax
push bx
push cx
push dx
push si



l1:
.IF LEVELS==2

mov collision,0

mov ax,0
mov al,Objectsx[1]
SUB AX,GHOST1_COLS
.IF GHOST1XCOOR == AX
mov ghostcheck, 1
.else
mov ax,0
mov al,Objectsx[0]
add ax,candy_cols
.if GHOST1XCOOR ==ax
mov ghostcheck, 0
 .endif
.endif


mov ax,0
mov al,Objectsx[2]
SUB AX,GHOST2_COLS
.IF GHOST2XCOOR == AX
mov ghostcheck2, 1
.else
mov ax,0
mov al,Objectsx[1]
add ax,candy_cols
.if GHOST2XCOOR ==ax
mov ghostcheck2, 0
 .endif
.endif

mov ax,0

mov ah,01h            ;register pressed key
int 16h 

jz justDown
mov ah,00h
int 16h

comparisons:
CMP aH,4Bh
JE left
CMP aH,4Dh
JE right
CMP aH,48h
JE UP
CMP ah,01h
JE exit

JMP  GOdown


left:
call GHOSTS_CLEAR
call screen_clear
call left_conditions
JMP GOdown

right:
call GHOSTS_CLEAR
call screen_clear
 call Right_conditions         

JMP GOdown

Up:
call GHOSTS_CLEAR
call screen_clear

mov ax,JUMP ;;SO THAT GROOT DOESNOT GO INTO THE TOP OF THE SCREEN
.if YCOOR >= ax
mov ax,JUMP
SUB YCOOR,ax
.endif

JMP GOdown

GoDown:

.if ghostcheck==0 ;; CHECKING CONDITIONS FOR LEFT AND RIGHT MOVEMENT OF GHOST1
INC GHOST1XCOOR
.else
DEC GHOST1XCOOR
.endif

.if ghostcheck2==0 ;; CHECKING CONDITIONS FOR LEFT AND RIGHT MOVEMENT OF GHOST2
INC GHOST2XCOOR
.else
DEC GHOST2XCOOR
.endif

call Draw_Again_LEVEL2
call score_Check
call display
call displayScore

call detectCollision
.if collision==1
mov levels,3
jmp exit
.endif 

mov ax,311 ;;COORDINATES OF THE FLAG POLE
mov bx,XCOOR
add bx,GROOT_COLS
.if bx >= AX  ;LEVEL1 COMPLETION CHECK
 mov LEVELS,3
.ENDIF

call delay


JMP l1

justdown:
call screen_clear
call GHOSTS_clear
call gravity

.if ghostcheck==0
INC GHOST1XCOOR
.else
DEC GHOST1XCOOR
.endif

.if ghostcheck2==0
INC GHOST2XCOOR
.else
DEC GHOST2XCOOR
.endif

call Draw_Again_LEVEL2
call score_Check
call display
call displayScore

call detectCollision
.if collision==1
mov levels,3
jmp exit
.endif 
call delay


jmp l1
.ENDIF


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
LEVEL2 ENDP
comment!...........................................DETECT COLLISiON PROC..........................................................!
detectCollision PROC
push ax
push bx
push cx
push dx
push si

;; CHECKING LEFT COLLISION
mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

.if GHOST1XCOOR > cx && GHOST1XCOOR < ax
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR
 .if GHOST1YCOOR < CX && GHOST1YCOOR > ax
   mov collision,1
 .endif
.endif 

;; CHECKING RIGHT COLLISION
mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

mov dx,GHOST1XCOOR
add dx,GHOST1_Cols
.if dx > cx && dx < ax
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR
 .if GHOST1YCOOR < CX && GHOST1YCOOR > ax
   mov collision,1
 .endif
.endif 


.if collision==0 ;;if the preceding condition didnot register the collision then check the next

;; CHECKING LEFT COLLISION
mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

.if GHOST2XCOOR > cx && GHOST2XCOOR < ax
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR
 .if GHOST2YCOOR < CX && GHOST2YCOOR > ax
   mov collision,1
 .endif
.endif


;; CHECKING RIGHT COLLISION
mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

mov dx,GHOST2XCOOR
add dx,GHOST2_Cols
.if dx > cx && dx < ax
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR
 .if GHOST2YCOOR < CX && GHOST2YCOOR > ax
   mov collision,1
 .endif
.endif 
.endif
 
.IF LEVELS==3


mov cx,0
mov cx,3
mov si,0

l1:
push cx

.if POTIONDROPY[SI] != 0

mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

.if POTIONDROPX[si] > cl && POTIONDROPX[si] < al
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR
 .if POTIONDROPY[si] < Cl && POTIONDROPY[si] > al
   mov collision,1
 .endif
.endif

.endif

inc si
pop cx
loop l1

.if POTIONDROPY[3] != 0
mov ax,XCOOR
add ax,GROOT_COLS ;;rightmost end of groot

mov cx,XCOOR

mov dx,0
mov dl,POTIONDROPX[3]
.if dx > cx && dx < ax
mov cx,YCOOR
add cx,GROOT_ROWS ;;lowest end of groot
MOV AX,YCOOR

mov dx,0
mov dl,POTIONDROPY[3]
 .if dx < cx && dx> ax
   mov collision,1
 .endif
.endif

.endif



.endif
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
detectCollision ENDP



comment!..............LEVEL 1 PROC...............................!
LEVEL1 PROC
push ax
push bx
push cx
push dx
push si



l1:
.IF LEVELS==1


mov ax,0

mov ah,01h            ;register pressed key
int 16h 

jz justDown
mov ah,00h
int 16h

comparisons:
CMP aH,4Bh
JE left
CMP aH,4Dh
JE right
CMP aH,48h
JE UP
CMP ah,01h
JE exit

JMP  GOdown


left:
call screen_clear
call left_conditions
JMP GOdown

right:
call screen_clear
  call Right_conditions         
ex:
JMP GOdown

Up:
call screen_clear

mov ax,JUMP ;;SO THAT GROOT DOESNOT GO INTO THE TOP OF THE SCREEN
.if YCOOR >= ax
mov ax,JUMP
SUB YCOOR,ax
.endif

JMP GOdown

GoDown:
call Draw_Again_LEVEL1
call score_Check
call display
call displayScore

mov ax,311 ;;COORDINATES OF THE FLAG POLE
mov bx,XCOOR
add bx,GROOT_COLS
.if bx >= AX  ;LEVEL1 COMPLETION CHECK
 mov LEVELS,2
.ENDIF

call delay
JMP l1

justdown:
call screen_clear
call gravity

call Draw_Again_LEVEL1
call score_Check
call display
call displayScore

call delay
jmp l1
.ENDIF


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
LEVEL1 ENDP


comment!..............GHOSTS GHOSTS...............................!
GHOSTS_Clear PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov ax,GHOST1YCOOR
mov Row_No,ax
mov ax,0
mov ax,GHOST1XCOOR
mov cx,GHOST1_ROWS
mov si,0


	l2:
	push cx
	mov cx,GHOST1_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,GHOST1_COLS
	inc row_no
	pop cx
	loop l2


mov ax,GHOST2YCOOR
mov Row_No,ax
mov ax,0
mov ax,GHOST2XCOOR

mov cx,GHOST2_ROWS 
mov si,0


	l3:
	push cx
	mov cx,GHOST2_COLS
	mov col_No,ax
	mov bx,0
		 l4:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l4
	add si,GHOST2_COLS
	inc row_no
	pop cx
	loop l3

pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
GHOSTS_clear ENDP


COMMENT!..........................................Draw_Again_LEVEL2..................................................!
Draw_Again_LEVEL2 PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

;mov ah,0H ;SETTING VIDEO MODE
;mov al,13h ;choose Type of Video mode  25x40. 256 colors. 200*320 pixels
;int 10h

  ;;STARTCLOUD
mov YCOOR,50
mov XCOOR,20
call Draw_CLOUD

;;MID CLOUD
mov YCOOR,30
mov XCOOR,120
call Draw_CLOUD

mov YCOOR,40
mov XCOOR,127
call Draw_CLOUD

;;END CLOUD
mov YCOOR,30
mov XCOOR,300
call Draw_CLOUD

mov YCOOR,60
mov XCOOR,200
call Draw_CLOUD

mov YCOOR,10
mov XCOOR,288

call Draw_FLAG

mov ax,GHOST1YCOOR
mov YCOOR,ax
mov ax,GHOST1XCOOR
mov XCOOR,ax

call Draw_GHOST1

mov ax,GHOST2YCOOR
mov YCOOR,ax
mov ax,GHOST2XCOOR
mov XCOOR,ax

call Draw_GHOST2
 
pop XCOOR
pop yCOOR

call Draw_GROOT


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
Draw_Again_LEVEL2 ENDP

COMMENT!..........................................GRAVITY..................................................!
GRAVITY PROC
push ax
push bx
push cx
push dx
push si

mov ax,0
mov al,Objectsx[0]     ;;GRAVITY BETWEEN ZERO AND THE FIRST CANDY CANE
;sub ax,GROOT_COLS
;sub ax,HALFCANDY

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if dx <= ax && xcoor >= 0
MOV CX,ycoor
add cx,GROOT_rows
ADD CX,5          ; No need to set this to 20- no difference in Groot's movement.
.if CX <= Ground 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov ax,Ground
sub ax,GROOT_ROWS
mov YCOOR,ax
.endif
.endif



mov ax,0                  ;;GRAVITY ABOVE THE FIRST CANDY CANE
mov al,Objectsx[0]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bl,Objectsx[0]

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR  < AX && dx > BX

MOV CX,ground
sub cx,GROOT_rows
sub cx,GROOT_rows
mov dx,YCOOR
add dx,5         ; No need to set this to 20- no difference in Groot's movement.
.if dx <= cx 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov YCOOR,cx
.endif
.endif


mov ax,0                ;;GRAVITY BETWEEN THE FIRST AND THE SECOND CANDY CANE
mov al,Objectsx[0]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bl,Objectsx[1]

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR >= AX && dx <= BX
MOV CX,ycoor
add cx,GROOT_rows
ADD CX,5          ; No need to set this to 20- no difference in Groot's movement.
.if CX <= Ground 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov ax,Ground
sub ax,GROOT_ROWS
mov YCOOR,ax
.endif
.endif



mov ax,0                  ;;GRAVITY ABOVE THE SECOND CANDY CANE
mov al,Objectsx[1]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bl,Objectsx[1]

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR  < AX && dx > BX

MOV CX,0
mov cl,Objectsy[1]
sub cx,GROOT_rows

mov dx,YCOOR
add dx,5         ; No need to set this to 20- no difference in Groot's movement.
.if dx <= cx 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov YCOOR,cx
.endif
.endif


mov ax,0                ;;GRAVITY BETWEEN THE SECOND AND THE THIRD CANDY CANE
mov al,Objectsx[1]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bl,Objectsx[2]

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR >= AX && dx <= BX
MOV CX,ycoor
add cx,GROOT_rows
ADD CX,5          ; No need to set this to 20- no difference in Groot's movement.
.if CX <= Ground 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov ax,Ground
sub ax,GROOT_ROWS
mov YCOOR,ax
.endif
.endif


mov ax,0                  ;;GRAVITY ABOVE THE THIRD CANDY CANE
mov al,Objectsx[2]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bl,Objectsx[2]

mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR  < AX && dx > BX

MOV CX,0
mov cl,Objectsy[2]
sub cx,GROOT_rows

mov dx,YCOOR
add dx,5         ; No need to set this to 20- no difference in Groot's movement.
.if dx <= cx 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov YCOOR,cx
.endif
.endif


mov ax,0                ;;GRAVITY BETWEEN THE THIRD CANDY CANE AND THE END
mov al,Objectsx[2]
add ax,CANDY_COLS ; the right end of the candy cane

mov bx,0
mov bx,320


mov dx,0
mov dx,XCOOR
add dx,GROOT_COLS
.if XCOOR >= AX && dx <= BX
MOV CX,ycoor
add cx,GROOT_rows
ADD CX,5          ; No need to set this to 20- no difference in Groot's movement.
.if CX <= Ground 
add YCOOR,5           ;20 was too much of a jump, so kept it 10
.else
mov ax,Ground
sub ax,GROOT_ROWS
mov YCOOR,ax
.endif
.endif

pop si
pop dx
pop cx
pop bx
pop ax
ret
GRAVITY ENDP

comment!..............LEFT_CONDITIONS...............................!
left_conditions PROC
push ax
push bx
push cx
push dx
push si
            mov ax,0
            add ax,Groot_cols
         
            mov dx,0
            mov dx,XCOOR
            sub dx,XJUMP 
 
            mov cx,0
            mov cl,Objectsx[0]
           .IF dx > 0 
             .if XCOOR < cx ;moving between zero and the first candy cane
            mov dx,XJUMP
            sub XCOOR,dx
               .endif
           .endif

mov ax,0     
mov al,Objectsx[1]

mov cx,0
mov cl,Objectsy[0]
sub cx,Groot_rows


mov dx,0
          mov dx,XCOOR
            sub dx,XJUMP
.IF dx > 0 && XCOOR < ax && YCOOR<= cx ;moving above the first candy cane
  
  mov dx,XJUMP
  sub XCOOR,dx

.endif

            mov ax,0
            mov al,Objectsx[0]
            add ax,CANDY_COLS
      
         
            mov dx,0
            mov dx,XCOOR
            sub dx,XJUMP 
 
            mov cx,0
            mov cl,Objectsx[1]
           .IF dx >= ax     ;xcoordinate should be graeter than the first candy cane 
             .if XCOOR < cx ;moving between first and the third candy cane
            mov dx,XJUMP
            sub XCOOR,dx
               .endif
           .endif

mov ax,0     
mov al,Objectsx[2]

mov cx,0
mov cl,Objectsy[1]
sub cx,Groot_rows


mov dx,0
mov dx,XCOOR
sub dx,XJUMP

mov bx,0
mov bl,Objectsx[1]

.IF XCOOR >= bx && XCOOR < ax && YCOOR<= cx ;moving above the second candy cane
  
  mov dx,XJUMP
  sub XCOOR,dx

.endif

       mov ax,0
            mov al,Objectsx[1]
            add ax,CANDY_COLS
      
         
            mov dx,0
            mov dx,XCOOR
            sub dx,XJUMP 
 
            mov cx,0
            mov cl,Objectsx[2]
           .IF dx >= ax     ;xcoordinate should be graeter than the first candy cane 
             .if XCOOR < cx ;moving between second and the third candy cane
            mov dx,XJUMP
            sub XCOOR,dx
               .endif
           .endif


mov ax,0     
mov ax,320

mov cx,0
mov cl,Objectsy[2]
sub cx,Groot_rows


mov dx,0
mov dx,XCOOR
sub dx,XJUMP

mov bx,0
mov bl,Objectsx[2]

.IF XCOOR >= bx && XCOOR < ax && YCOOR<= cx ;moving above the third candy cane
  
  mov dx,XJUMP
  sub XCOOR,dx

.endif

            mov ax,0
            mov al,Objectsx[2]
            add ax,CANDY_COLS
      
         
            mov dx,0
            mov dx,XCOOR
            sub dx,XJUMP 
 
            mov cx,0
            mov cx,320
           .IF dx >= ax     ;xcoordinate should be graeter than the second candy cane 
             .if XCOOR < cx ;moving between third candy cane and the end 
            mov dx,XJUMP
            sub XCOOR,dx
               .endif
           .endif

exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
left_conditions ENDP
comment!..............RIGHT_CONDITIONS...............................!
right_conditions PROC
push ax
push bx
push cx
push dx
push si
            mov ax,0
           
           mov dx,0
           mov dx,XCOOR
           add dx,XJUMP

          mov cx,0
          mov cl,Objectsx[0]
          sub cx,GROOT_COLS
         
          .if XCOOR>= ax && dx <= cx ;moving between the first and second candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif

            mov ax,0
            mov al,Objectsx[0]
            add ax,Candy_cols
          
.if XCOOR < ax
	mov ax,0
	mov al,Objectsx[0]
	sub ax,GROOT_COLS ; THE RIGHTMOST OF THE CANDYCANE BY SUBTRACTING THE GROOT COLS FROM CANDY CANE

	mov bx,0
	mov bx,XCOOR
	add bx,XJUMP ; ADDING THE JUMP ITO x TO SEE WHERE IT GOES

	mov cx,0
        mov cx,GROUND
	sub cx,GROOT_rows
  
	.if bx <= ax && ycoor >= cx ;moving towards the first candy cane and not colliding 	
	mov dx,XJUMP
	add XCOOR,dx
        .endif
 
          
       

           mov cx,0
           mov cx,Ground
           sub cx,GROOT_ROWS
           sub cx,GROOT_ROWS

          .if ycoor <= cx ;moving over the first candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif
   JMP exit

           
.endif
       
            mov ax,0
            mov al,Objectsx[0]
            add ax,Candy_cols
          
           mov dx,0
           mov dx,XCOOR
           add dx,XJUMP

          mov cx,0
          mov cl,Objectsx[1]
          sub cx,GROOT_COLS
         
          .if XCOOR>= ax && dx <= cx ;moving between the first and second candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif

           mov ax,0
            mov al,Objectsx[1]
            add ax,Candy_cols
          
.if XCOOR < ax
	mov ax,0
	mov al,Objectsx[1]
	sub ax,GROOT_COLS ; THE RIGHTMOST OF THE CANDYCANE BY SUBTRACTING THE GROOT COLS FROM CANDY CANE

	mov bx,0
	mov bx,XCOOR
	add bx,XJUMP ; ADDING THE JUMP ITO x TO SEE WHERE IT GOES

	mov cx,0
        mov cx,GROUND
	sub cx,GROOT_rows
  
	.if bx <= ax && ycoor >= cx ;moving towards the first candy cane and not colliding 	
	mov dx,XJUMP
	add XCOOR,dx
        .endif
 
          
       

           mov cx,0
           mov cl,Objectsy[1]
           sub cx,GROOT_ROWS
          

          .if ycoor <= cx ;moving over the first candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif

           JMP exit
.endif
       
            mov ax,0
            mov al,Objectsx[1]
            add ax,Candy_cols
          
           mov dx,0
           mov dx,XCOOR
           add dx,XJUMP

          mov cx,0
          mov cl,Objectsx[2]
          sub cx,GROOT_COLS
         
          .if XCOOR>= ax && dx <= cx ;moving between the first and second candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif

    mov ax,0
            mov al,Objectsx[2]
            add ax,Candy_cols
          
.if XCOOR < ax
	mov ax,0
	mov al,Objectsx[2]
	sub ax,GROOT_COLS ; THE RIGHTMOST OF THE CANDYCANE BY SUBTRACTING THE GROOT COLS FROM CANDY CANE

	mov bx,0
	mov bx,XCOOR
	add bx,XJUMP ; ADDING THE JUMP ITO x TO SEE WHERE IT GOES

	mov cx,0
        mov cx,GROUND
	sub cx,GROOT_rows
  
	.if bx <= ax && ycoor >= cx ;moving towards the first candy cane and not colliding 	
	mov dx,XJUMP
	add XCOOR,dx
        .endif
 
          
       

           mov cx,0
           mov cl,Objectsy[2]
           sub cx,GROOT_ROWS
          

          .if ycoor <= cx ;moving over the first candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif

           JMP exit
.endif
       
            mov ax,0
            mov al,Objectsx[2]
            add ax,Candy_cols
          
           mov dx,0
           mov dx,XCOOR
           add dx,XJUMP

          mov cx,0
          mov cx,320
          sub cx,GROOT_COLS
         
          .if XCOOR>= ax && dx <= cx ;moving between the first and second candy cane 	
	   mov dx,XJUMP
	   add XCOOR,dx
           .endif
       

exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
Right_Conditions ENDP
comment!..............Screen Clear...............................!
Screen_Clear PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,GROOT_ROWS 
mov si,0


	l2:
	push cx
	mov cx,GROOT_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,GROOT_COLS
	inc row_no
	pop cx
	loop l2


pop XCOOR
pop YCOOR
exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
Screen_clear ENDP

comment!..............Draw Again LEVEL1...............................!
Draw_Again_LEVEL1 PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

;mov ah,0H ;SETTING VIDEO MODE
;mov al,13h ;choose Type of Video mode  25x40. 256 colors. 200*320 pixels
;int 10h

  ;;STARTCLOUD
mov YCOOR,50
mov XCOOR,20
call Draw_CLOUD

;;MID CLOUD
mov YCOOR,30
mov XCOOR,120
call Draw_CLOUD

mov YCOOR,40
mov XCOOR,127
call Draw_CLOUD

;;END CLOUD
mov YCOOR,30
mov XCOOR,300
call Draw_CLOUD

mov YCOOR,60
mov XCOOR,200
call Draw_CLOUD

mov YCOOR,10
mov XCOOR,288

call Draw_FLAG

 
pop XCOOR
pop yCOOR

call Draw_GROOT


exit:
pop si
pop dx
pop cx
pop bx
pop ax

RET 
Draw_Again_LEVEL1 ENDP

COMMENT!..........................................DRAW_GROOT..................................................!
Draw_GROOT PROC
push ax
push bx
push cx
push dx
push si


mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,GROOT_ROWS 
mov si,0


	l2:
	push cx
	mov cx,GROOT_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,GROOT[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,GROOT_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_GROOT ENDP

COMMENT!..........................................DRAW_FOREGROUND..................................................!
Draw_ForeGround PROC
push XCOOR
Push YCOOR
push ax
push bx
push cx
push dx
push si

   mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,22  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,108         ;DARK PURPLE
    int 10h


mov YCOOR,180
mov XCOOR,20
call Draw_STONE

mov YCOOR,190
mov XCOOR,40
call Draw_STONE

mov YCOOR,192
mov XCOOR,44
call Draw_STONE

mov YCOOR,176
mov XCOOR,90
call Draw_STONE

mov YCOOR,192
mov XCOOR,120
call Draw_STONE
  
mov YCOOR,192
mov XCOOR,122
call Draw_STONE

mov YCOOR,192
mov XCOOR,180
call Draw_STONE
  
mov YCOOR,180
mov XCOOR,200
call Draw_STONE

mov YCOOR,180
mov XCOOR,250
call Draw_STONE

mov YCOOR,180
mov XCOOR,257
call Draw_STONE

mov YCOOR,192
mov XCOOR,290
call Draw_STONE
  
mov YCOOR,180
mov XCOOR,300
call Draw_STONE


mov ax,0
mov al,Objectsx[3]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[3]
mov YCOOR,ax
call Draw_SKUlL

mov ax,0
mov al,Objectsx[4]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[4]
mov YCOOR,ax
call Draw_SKUlL

mov ax,0
mov al,Objectsx[5]
mov XCOOR,ax
mov ax,0
mov al,Objectsy[5]
mov YCOOR,ax
call Draw_SKUlL

  
  
pop si
pop dx
pop cx
pop bx
pop ax
pop YCOOR
pop XCOOR
ret
Draw_ForeGround ENDP
COMMENT!..........................................   DRAW_POTION ..................................................!
Draw_POTION PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,POTION_ROWS 
mov si,0


	l2:
	push cx
	mov cx,POTION_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,POTION[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,POTION_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_POTION ENDP
COMMENT!..........................................   DRAW_GHOST1  ..................................................!
Draw_GHOST1 PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,GHOST1_ROWS 
mov si,0


	l2:
	push cx
	mov cx,GHOST1_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,GHOST1[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,GHOST1_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_GHOST1 ENDP
COMMENT!..........................................   DRAW_GHOST2 ..................................................!
Draw_GHOST2 PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,GHOST2_ROWS 
mov si,0


	l2:
	push cx
	mov cx,GHOST2_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,GHOST2[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,GHOST2_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_GHOST2 ENDP
COMMENT!..........................................   DRAW_WITCH  ..................................................!
Draw_WITCH PROC

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,WITCH_ROWS 
mov si,0


	l2:
	push cx
	mov cx,WITCH_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,WITCH[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,WITCH_COLS
	inc row_no
	pop cx
	loop l2


RET
Draw_WITCH ENDP

clear_FLAG PROC
push ax
push bx
push cx
push dx
push si

push YCOOR
push XCOOR

mov YCOOR,10
mov XCOOR,288

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,FLAG_ROWS 
mov si,0


	l2:
	push cx
	mov cx,FLAG_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,FLAG_COLS
	inc row_no
	pop cx
	loop l2

mov cx,POLE_ROWS 
mov si,0
mov ax,POLE_COLS
sub col_no,ax
mov ax,col_no

	l3:
	push cx
	mov cx,POLE_COLS
	mov col_No,ax
	mov bx,0
		 l4:
		push cx
                push ax
 		mymacro COL_No,Row_No,35
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l4
	add si,POLE_COLS
	inc row_no
	pop cx
	loop l3
pop XCOOR
POP YCOOR
pop si
pop dx
pop cx
pop bx
pop ax

RET
clear_FLAG ENDP
COMMENT!..........................................   DRAW_FLAG  ..................................................!
Draw_FLAG PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,FLAG_ROWS 
mov si,0


	l2:
	push cx
	mov cx,FLAG_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,SPIDER_FLAG[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,FLAG_COLS
	inc row_no
	pop cx
	loop l2

mov cx,POLE_ROWS 
mov si,0
mov ax,POLE_COLS
sub col_no,ax
mov ax,col_no

	l3:
	push cx
	mov cx,POLE_COLS
	mov col_No,ax
	mov bx,0
		 l4:
		push cx
                push ax
 		mymacro COL_No,Row_No,POLE[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l4
	add si,POLE_COLS
	inc row_no
	pop cx
	loop l3

pop si
pop dx
pop cx
pop bx
pop ax

RET
Draw_FLAG ENDP
COMMENT!..........................................   DRAW_CLOUD  ..................................................!
Draw_CLOUD PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,CLOUD_ROWS 
mov si,0


	l2:
	push cx
	mov cx,CLOUD_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,CLOUD[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,CLOUD_COLS
	inc row_no
	pop cx
	loop l2

pop si
pop dx
pop cx
pop bx
pop ax

RET
Draw_CLOUD ENDP
COMMENT!..........................................   DRAW_STONE  ..................................................!
Draw_STONE PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,STONE_ROWS 
mov si,0


	l2:
	push cx
	mov cx,STONE_COLS 
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,STONE[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,STONE_COLS
	inc row_no
	pop cx
	loop l2

pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_STONE ENDP
COMMENT!..........................................DRAW_SKULL..................................................!
Draw_SKULL PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx,SKULL_ROWS 
mov si,0


	l2:
	push cx
	mov cx,SKULL_COLS 
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,SKULL[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,SKULL_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
RET
Draw_SKULL ENDP
COMMENT!..........................................DRAW_CANDYCANE................................................!
Draw_CANDYCANE PROC 
push ax
push bx
push cx
push dx
push si

;;CANDY CANE HEAD
mov cx,CANDY_ROWS
mov si,0

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

	l3:
	push cx
	mov cx,CANDY_COLS
	mov col_No,ax
	mov bx,0
		 l4:
			push cx
                        push ax
 			mymacro COL_No,Row_No,CANDY_CANE1[si+bx]
        		inc COL_NO
        		inc bx
                        pop ax
			pop cx
		loop l4

	add si,CANDY_COLS
	inc row_no
	pop cx
	loop l3

;;CANDY CANE 

mov col_No,ax
mov si,0
mov bx,0
mov cx,HeightOFCandy
l7:
push cx
mov cx,CANDYHEIGHT_ROWS 
mov col_No,60
mov si,0
mov bx,0

	l5:
	push cx
	mov cx,6
	mov col_No,ax
	mov bx,0
		 l6:
		push cx
                push ax
 		mymacro COL_No,Row_No,CANDYCANE_HEIGHT[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l6
	add si,CANDYHEIGHT_COLS
	inc row_no
	pop cx
	loop l5
;inc ROW_No
pop cx
loop l7


pop si
pop dx
pop cx
pop bx
pop ax

ret
Draw_CANDYCANE endp
COMMENT!..........................................TIMER PROC..................................................!
TIMER PROC


push ax
push bx
push cx
push dx


mov ah,86h
mov cx,00
mov dx,4240h
int 15h


pop dx
pop cx
pop bx
pop ax
RET  
TIMER ENDP
COMMENT!..........................................DELAY PROC..................................................!
delay proc


push ax
push bx
push cx
push dx



mov cx,1000
mydelay:
mov bx,1000 ;; increase this number if you want to add more delay, and decrease this number if you want to reduce delay.
mydelay1:
dec bx
jnz mydelay1
loop mydelay


pop dx
pop cx
pop bx
pop ax

ret

delay endp
TimerSec proc
	mov cx,000fh
	mov dx,9000h
	mov ah,86h
	int 15h
ret
TimerSec endp
COMMENT!..........................................DRAW KINGDOM..................................................!

Draw_KINGDOM PROC
push ax
push bx
push cx
push dx
push si

mov YCOOR,113
mov XCOOR,260
call Draw_KINGDOM1_L

mov YCOOR,85
mov XCOOR,274
call Draw_KINGDOM1_UP

mov YCOOR,113
mov XCOOR,281
call Draw_KINGDOM1

pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_KINGDOM ENDP
COMMENT!..........................................KINGDOM DRAWING..................................................!
Draw_KINGDOM1_L PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx, KINGDOM1_L_ROWS 
mov si,0


	l2:
	push cx
	mov cx,KINGDOM1_L_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,KINGDOM1_L[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,KINGDOM1_L_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_KINGDOM1_L ENDP

Draw_KINGDOM1_UP PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx, KINGDOM1_UP_ROWS 
mov si,0


	l2:
	push cx
	mov cx,KINGDOM1_UP_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,KINGDOM1_UP[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,KINGDOM1_UP_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_KINGDOM1_UP ENDP

;;;;;;;;;;;;;;;;;;;;;;;

Draw_KINGDOM1 PROC
push ax
push bx
push cx
push dx
push si

mov ax,YCOOR
mov Row_No,ax
mov ax,0
mov ax,XCOOR

mov cx, KINGDOM1_ROWS 
mov si,0


	l2:
	push cx
	mov cx,KINGDOM1_COLS
	mov col_No,ax
	mov bx,0
		 l1:
		push cx
                push ax
 		mymacro COL_No,Row_No,KINGDOM1[si+bx]
        	inc COL_NO
        	inc bx
                pop ax
		pop cx
		loop l1
	add si,KINGDOM1_COLS
	inc row_no
	pop cx
	loop l2
pop si
pop dx
pop cx
pop bx
pop ax
ret
Draw_KINGDOM1 ENDP
COMMENT!..........................................printTitle PROC..................................................!
printTitle PROC		;print SuperGroot

mov col_No,112
mov ROW_No,40
mov Xcoor,150
mov si,0
mov bx,0

mov cx,21 ;ROWS OF S
mov si,0
mov ax,0

	t1a:
	push cx
	mov cx,20
	mov col_No,112
	mov bx,0
		t1b:
		push cx
 		mymacro COL_No,Row_No,S[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t1b
	add si,20
	inc row_no
	pop cx
	loop t1a


mov col_No,130
mov ROW_No,41
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF U
mov si,0
mov ax,0

	t2a:
	push cx
	mov cx,20
	mov col_No,130
	mov bx,0
		t2b:
		push cx
 		mymacro COL_No,Row_No,U[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t2b
	add si,20
	inc row_no
	pop cx
	loop t2a


mov col_No,148
mov ROW_No,41
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF P
mov si,0
mov ax,0

	t3a:
	push cx
	mov cx,18
	mov col_No,148
	mov bx,0
		t3b:
		push cx
 		mymacro COL_No,Row_No,P[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t3b
	add si,18
	inc row_no
	pop cx
	loop t3a


mov col_No,163
mov ROW_No,41
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF E
mov si,0
mov ax,0

	t4a:
	push cx
	mov cx,15
	mov col_No,163
	mov bx,0
		t4b:
		push cx
 		mymacro COL_No,Row_No,E[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t4b
	add si,15
	inc row_no
	pop cx
	loop t4a



mov col_No,178
mov ROW_No,41
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF R
mov si,0
mov ax,0

	t5a:
	push cx
	mov cx,18
	mov col_No,178
	mov bx,0
		t5b:
		push cx
 		mymacro COL_No,Row_No,R1[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t5b
	add si,18
	inc row_no
	pop cx
	loop t5a


mov col_No,112
mov ROW_No,60
mov Xcoor,150
mov si,0
mov bx,0

mov cx,21 ;ROWS OF G
mov si,0
mov ax,0

	t6a:
	push cx
	mov cx,18
	mov col_No,112
	mov bx,0
		t6b:
		push cx
 		mymacro COL_No,Row_No,G[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t6b
	add si,18
	inc row_no
	pop cx
	loop t6a


mov col_No,130
mov ROW_No,60
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF R
mov si,0
mov ax,0

	t7a:
	push cx
	mov cx,18
	mov col_No,130
	mov bx,0
		t7b:
		push cx
 		mymacro COL_No,Row_No,R2[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t7b
	add si,18
	inc row_no
	pop cx
	loop t7a


mov col_No,147
mov ROW_No,61
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF 0
mov si,0
mov ax,0

	t8a:
	push cx
	mov cx,16
	mov col_No,147
	mov bx,0
		t8b:
		push cx
 		mymacro COL_No,Row_No,O1[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t8b
	add si,16
	inc row_no
	pop cx
	loop t8a


mov col_No,162
mov ROW_No,61
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF O
mov si,0
mov ax,0

	t9a:
	push cx
	mov cx,15
	mov col_No,163
	mov bx,0
		t9b:
		push cx
 		mymacro COL_No,Row_No,O2[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t9b
	add si,15
	inc row_no
	pop cx
	loop t9a


mov col_No,177
mov ROW_No,60
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;ROWS OF T
mov si,0
mov ax,0

	t10a:
	push cx
	mov cx,19
	mov col_No,178
	mov bx,0
		t10b:
		push cx
 		mymacro COL_No,Row_No,T[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop t10b
	add si,19
	inc row_no
	pop cx
	loop t10a



RET
printTitle ENDP


takeUsername PROC	;will take username input at start screen

;mov bh,108
mov promptTextR,13
mov promptTextC,12

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'E'
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'N'
;mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'T'
;mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'E'
;mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'R'
;mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC
inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'U'
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'S'
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'E'
;mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'R'
mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'N'
mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'A'
mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'M'
mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,'E'
mov bh,0
mov bl,6
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,':'
mov bh,0
mov bl,6
mov cx,1
int 10h


inc promptTextR
inc promptTextR
mov promptTextC,12

TakeName:
mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h
mov ah,01h
int 21h
mov bl,al
mov ah,09h
mov al,bl
mov bh,0
mov bl,0
mov cx,1
int 10h
inc promptTextC
cmp al,13
jne TakeName



RET
takeUsername ENDP


YouLoseScreen PROC
push ax
push bx
push cx
push dx
push si

    mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,0 	;for colour
    int 10h


mov ah,02h
mov bh,0
mov dh,8
mov dl,15
int 10h

mov ah,09h
mov dx,0
lea dx,lose
int 21h


mov ah,02h
mov bh,0
mov dh,12
mov dl,10
int 10h

mov ah,09h
mov dx,0
lea dx,Wluck
int 21h

pop si
pop dx
pop cx
pop bx
pop ax
RET
YouLoseScreen ENDP

InstructionsScreen PROC
push ax
push bx
push cx
push dx
push si

 mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,0 	;for colour
    int 10h



mov ah,02h
mov bh,0
mov dh,1
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction
int 21h
		
mov ah,02h
mov bh,0
mov dh,4
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction1
int 21h

mov ah,02h
mov bh,0
mov dh,6
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction2
int 21h

mov ah,02h
mov bh,0
mov dh,8
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction3
int 21h

mov ah,02h
mov bh,0
mov dh,10
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction4
int 21h

mov ah,02h
mov bh,0
mov dh,12
mov dl,1
int 10h

mov ah,09h
mov dx,0
lea dx,instruction5
int 21h


mov ah,02h
mov bh,0
mov dh,18
mov dl,14
int 10h

mov ah,09h
mov dx,0
lea dx,GLuck
int 21h
pop si
pop dx
pop cx
pop bx
pop ax
RET
InstructionsScreen ENDP

LevelComplete PROC
push ax
push bx
push cx
push dx
push si
  mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh,0 	;for colour
    int 10h

mov ah,02h
mov bh,0
mov dh,6
mov dl,11
int 10h

mov ah,09h
mov dx,0
lea dx,done1
int 21h

mov ah,02h
mov bh,0
mov dh,9
mov dl,12
int 10h

mov ah,09h
mov dx,0
lea dx,done2
int 21h

mov ah,02h
mov bh,0
mov dh,14
mov dl,8
int 10h

mov ah,09h
mov dx,0
lea dx,done3
int 21h

pop si
pop dx
pop cx
pop bx
pop ax
RET
LevelComplete ENDP

displayScore PROC	;display the score
push ax
push bx
push cx
push dx
push si
inc promptTextC

cmp score,9
jbe size1
cmp score,99
jbe size2
cmp score,100 ;for 100
jae size3

size1:		;single digit
mov al,score
mov scoreSTR[0],al

mov promptTextR,2
mov promptTextC,9

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,score
add al,48
mov bl,15
mov cx,1
int 10h

jmp here

size2:		;double digit
mov al,score
mov bl,10
mov ah,0
div bl
mov scoreSTR[0],al
mov scoreSTR[1],ah

mov promptTextR,2
mov promptTextC,9

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,scoreSTR[0]
add al,48
mov bl,15
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,scoreSTR[1]
add al,48
mov bl,15
mov cx,1
int 10h

jmp here

size3:		;triple digit
mov al,score
mov bl,100
mov ah,0
div bl
mov scoreSTR[0],al
mov al,ah
mov bl,10
mov ah,0
div bl
mov scoreSTR[1],al
mov scoreSTR[2],ah

mov promptTextR,2
mov promptTextC,9

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,scoreSTR[0]
add al,48
mov bl,15
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,scoreSTR[1]
add al,48
mov bl,15
mov cx,1
int 10h

inc promptTextC

mov ah,2
mov dh,promptTextR
mov dl,promptTextC
int 10h

mov ah,09h
mov al,scoreSTR[2]
add al,48
mov bl,15
mov cx,1
int 10h

jmp here

here:
pop si
pop dx
pop cx
pop bx
pop ax
RET
displayScore ENDP

display PROC		;to display "score:"
push ax
push bx
push cx
push dx
push si

mov ah,02h
mov bh,0
mov dh,2
mov dl,3
int 10h

mov ah,09h
mov dx,0
lea dx,scoreText
int 21h

pop si
pop dx
pop cx
pop bx
pop ax
RET
display ENDP

END main

