.model large
.stack 100h

.data ; first it prints the quotient and then the remainder of the average


prompt1 DB "Enter 5 number", '$'
array DB 900 DUP('0')
var Db  10
Quotient DB 0
num DB 11
XCOOR DB 0
YCOOR DB 0

Remainder DB 0
Groot   DB 90,90,90,90,90,90,90,90,90,90,02,90,90,90,90,90,90,90,90,90,90,02,02,02,90,90 
        DB 90,90,90,90,90,90,90,90,90,90,02,90,90,90,90,90,90,02,90,06,90,02,02,90,90,90
	DB 90,90,90,90,02,90,90,90,90,02,02,02,90,02,90,90,90,02,02,02,90,02,02,90,90,90
	DB 90,90,90,10,02,90,06,06,10,06,02,10,10,10,10,90,90,02,02,02,02,90,02,90,90,90
	DB 90,90,10,02,10,90,06,90,10,06,02,06,10,06,10,10,10,06,10,10,10,10,10,90,90,90
	DB 90,90,02,10,10,02,06,02,10,06,10,06,06,06,06,06,06,06,06,10,10,06,02,02,90,90
	DB 90,90,02,06,06,06,02,06,06,06,06,06,06,06,06,06,06,06,06,06,10,06,10,06,90,90 ;GREEN GRASS
	DB 90,90,06,06,06,06,06,00,06,06,06,06,06,06,06,06,06,06,00,06,06,06,06,06,90,90
	DB 90,90,06,06,06,06,00,00,15,06,06,06,06,06,06,06,06,00,00,15,06,06,06,06,90,90
	DB 90,90,06,06,06,06,00,00,15,06,06,06,06,06,06,06,06,00,00,15,06,06,06,06,90,90
	DB 90,90,06,06,06,06,15,15,15,06,06,06,06,06,06,06,06,15,15,15,06,06,06,06,90,90
	DB 90,90,06,06,06,06,06,15,06,06,06,06,06,06,06,06,06,06,15,06,06,06,06,06,90,90
	DB 90,90,90,06,06,06,06,06,06,06,00,06,06,06,06,00,06,06,06,06,06,06,06,90,90,90 ;SMILE STARTS
	DB 90,90,90,90,06,06,06,06,06,06,06,00,00,00,00,06,06,06,06,06,06,06,90,90,90,90
        DB 90,90,90,90,90,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,06,90,90,90,90,90
        DB 90,90,90,90,90,90,06,06,06,06,06,06,06,06,06,06,06,06,06,06,90,90,90,90,90,90
	DB 90,90,90,90,90,90,90,06,06,06,06,06,06,06,06,06,06,06,06,90,90,90,90,90,90,90 ;17 lines

	DB 90,90,90,90,90,90,90,90,90,00,06,06,06,06,06,00,06,90,90,90,90,90,90,90,90,90
	DB 90,90,90,90,90,90,90,90,06,06,06,00,06,06,06,00,06,06,90,90,90,90,90,90,90,90
	DB 90,90,90,90,90,90,90,06,00,06,00,06,00,06,00,06,06,06,06,90,90,90,90,90,90,90
        DB 90,90,90,90,90,90,06,00,06,06,06,06,06,00,06,06,00,06,06,06,90,90,90,90,90,90
        DB 90,90,90,90,90,06,00,06,00,06,06,06,00,06,06,06,06,00,06,06,06,90,90,90,90,90
	DB 90,90,90,90,06,06,06,06,06,00,06,00,06,06,06,00,06,06,00,06,06,06,90,90,90,90
	DB 90,90,90,06,06,06,06,06,06,06,00,06,06,06,00,06,06,06,06,00,06,06,06,90,90,90
	DB 90,90,90,06,06,06,06,06,06,00,06,00,06,00,06,00,06,06,06,06,06,06,06,90,90,90
	DB 90,90,06,06,06,06,16,06,00,06,06,06,00,06,06,06,00,06,06,06,06,06,06,06,90,90
        DB 90,90,10,06,06,10,90,00,06,06,06,06,06,00,00,06,06,00,06,90,10,06,06,10,90,90
	DB 90,90,02,10,02,02,90,06,00,06,00,06,06,06,06,00,06,06,06,90,02,10,02,02,90,90
	DB 90,90,90,02,10,90,90,06,06,00,06,06,06,06,06,06,00,06,06,90,90,02,10,90,90,90 ;90

	DB 90,90,90,90,90,90,06,06,06,00,06,06,90,06,06,00,06,00,06,90,90,90,90,90,90,90
        DB 90,90,90,90,90,90,06,06,06,06,00,06,90,06,00,06,06,06,00,90,90,90,90,90,90,90
	DB 90,90,90,90,90,90,00,06,06,00,06,00,90,00,06,00,06,06,06,90,90,90,90,90,90,90
	DB 90,90,90,90,90,90,06,06,00,06,06,06,90,06,06,06,00,06,06,90,90,90,90,90,90,90
	DB 90,90,90,90,90,90,90,00,00,00,00,90,90,90,00,00,00,00,90,90,90,90,90,90,90,90 ;5


CANDY_CANE1 DB 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 90,90,90,90,90,90,90,04,15,04,15,15,15,04,90,90,90,90,90,90
 DB 90,90,90,90,90,15,04,04,04,15,15,15,04,04,04,15,90,90,90,90
 DB 90,90,90,90,15,04,04,04,15,15,15,04,04,04,15,15,04,90,90,90 
 DB 90,90,90,15,04,04,04,15,15,15,04,04,04,15,15,15,04,04,90,90
 DB 90,90,15,04,04,04,15,15,15,04,04,04,15,15,15,04,04,04,15,90
 DB 90,15,04,04,04,15,15,15,04,04,04,15,15,15,04,04,04,15,15,04
 DB 90,04,04,04,15,15,15,04,04,04,15,15,15,04,04,04,15,15,15,15
 DB 04,04,04,15,15,15,04,04,04,15,15,15,04,04,04,15,15,15,15,04
 DB 04,04,15,15,15,04,04,04,15,15,15,04,04,04,15,15,15,15,04,04
 DB 04,15,15,15,04,04,04,15,90,90,90,90,90,90,15,15,15,04,04,04
 DB 15,15,15,04,04,04,15,90,90,90,90,90,90,90,15,15,04,04,04,15
 DB 15,15,04,04,04,15,90,90,90,90,90,90,90,90,90,04,05,04,15,15
 DB 15,04,04,04,15,15,90,90,90,90,90,90,90,90,90,05,04,15,15,15
 DB 04,04,04,15,15,15,90,90,90,90,90,90,90,90,90,04,15,15,15,15
 DB 04,04,15,15,15,04,90,90,90,90,90,90,90,90,90,15,15,15,15,04
 DB 04,15,15,15,04,04,90,90,90,90,90,90,90,90,90,15,15,15,04,04
 DB 15,15,15,04,04,04,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 15,15,04,04,04,15,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 15,04,04,04,15,15,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 04,04,04,15,15,15,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 04,04,15,15,15,04,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 04,15,15,15,04,04,90,90,90,90,90,90,90,90,90,90,90,90,90,90
 DB 15,15,15,04,04,04,90,90,90,90,90,90,90,90,90,90,90,90,90,90

 
COL_No DW 0
Row_No DW 0


.code

MAIN PROC

mov ax,@data 
mov ds,ax;to move the data within the code


mymacro macro p1,p2,p3
  
        mov ah,0Ch
        mov cx, p1   ;COL
    	mov dx, p2  ;ROW
        mov al, p3  ;PIXEL COLOUR ;MAGENTA 
	INT 10h
 endm


mov ah,0H ;SETTING VIDEO MODE
mov al,13h ;choose Type of Video mode  25x40. 256 colors. 200*320 pixels
int 10h

  

    mov ah, 06h  		;For scroll Mode
    mov al, 0 			;Define the row from which the colouring starts ,however dont change other than zero,destroys screen
    mov cl,0		        ;CL left coloumn number
    mov ch,0  			;CH= upper row number 
    mov dl,40		        ;DL Right coloumn number
    mov dh,25			;DH= lower row number
    mov bh, 90      	;for colour
    int 10h

mov col_No,60
mov ROW_No,60
mov Xcoor,150
mov si,0
mov bx,0

mov cx,20 ;34 ROWS OF GROOT
mov si,0
mov ax,0

	l3:
	push cx
	mov cx,20
	mov col_No,60
	mov bx,0
		 l4:
		push cx
 		mymacro COL_No,Row_No,CANDY_CANE1[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop l4
	add si,20
	inc row_no
	pop cx
	loop l3




mov col_No,0
mov ROW_No,150
mov Xcoor,150
mov si,0
mov bx,0


mov cx,34 ;34 ROWS OF GROOT
mov si,0
mov ax,0

	l2:
	push cx
	mov cx,26
	mov col_No,0
	mov bx,0
		 l1:
		push cx
 		mymacro COL_No,Row_No,Groot[si+bx]
        	inc COL_NO
        	inc bx
		pop cx
		loop l1
	add si,26
	inc row_no
	pop cx
	loop l2





exit:
mov ah,04ch
int 21h
ret
MAIN ENDP
delay proc


push ax
push bx
push cx
push dx



mov cx,1000
mydelay:
mov bx,100  ;; increase this number if you want to add more delay, and decrease this number if you want to reduce delay.
mydelay1:
dec bx
jnz mydelay1
loop mydelay


pop dx
pop cx
pop bx
pop ax

ret

delay endp
END main

